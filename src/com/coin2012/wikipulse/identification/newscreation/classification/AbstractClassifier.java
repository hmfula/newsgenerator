package com.coin2012.wikipulse.identification.newscreation.classification;

import java.util.ArrayList;
import java.util.List;

import com.coin2012.wikipulse.extraction.Extractable;
import com.coin2012.wikipulse.models.Category;
import com.coin2012.wikipulse.models.Editor;
import com.coin2012.wikipulse.models.WikiEdit;

public abstract class AbstractClassifier implements Classifiable{

	public boolean isEditNewsWorthy(WikiEdit wikiEdit) {
		if(wikiEdit.getContent() != null){
			return 	 (wikiEdit.getContent().length()) < 10 ? false: true;	
		}
		return false;
	}//not typo edits < 10 characters - simplified approach
	
	/**
	 * Identifies domain experts in a given category
	 * @param wikiEdit
	 * @return true if true if  a given author is a news generator
	 */
	public boolean isEditorADomainExpert(Extractable extractor, Category category,  WikiEdit wikiEdit, int numberOfEdits) {
		List <String> editorNames = new ArrayList<String>();
		List <Editor> editors =  extractor.getOneDomainExperts(category, numberOfEdits);
		for(Editor editor : editors){
			editorNames.add(editor.getName());	
		}
		return editorNames.contains(wikiEdit.getUser());
	}
	
	/**
	 * Identifies news contributors
	 * @param extractor is a  delegate interface that handles the call 
	 * @param wikiEdit represents an edit made by the author
	 * @param minNews represents number of news items generated by the author
	 * @return true if the author in the wikiEdit is found in the database table where news creators are stored
	 */
	public boolean isEditorANewsContributor(Extractable extractor, WikiEdit wikiEdit, int minNews) {
		List <String> editorNames = new ArrayList<String>();
		List <Editor> editors =  extractor.getNewsContributors(minNews);
		for(Editor editor : editors){
			editorNames.add(editor.getName());	
		}
		return editorNames.contains(wikiEdit.getUser());
	}
	
	/**
	 * Identifies top contributing authors
	 * @param extractor is a  delegate interface that handles the call 
	 * @param wikiEdit represents an edit made by the author
	 * @param limit represents number of news items generated by the author
	 * @return true if the author in the wikiEdit is found in the database table where top news creators are stored
	 */
	public boolean isEditorInListOfTopContributors(Extractable extractor, WikiEdit wikiEdit, int limit) {
		List <String> editorNames = new ArrayList<String>();
		List <Editor> editors =  extractor.getTopContributors(limit);
		for(Editor editor : editors){
			editorNames.add(editor.getName());	
		}
		return editorNames.contains(wikiEdit.getUser());
	}
	
	/**
	 * Classifies wiki edits based  on domain specific rules. It is based on the template method design pattern. 
	 * All subclasses must implement this method with their own classification logic.
	 * @param wikiEdit
	 * @return 
	 */
	public abstract boolean classify(Object classifiable);//classify according to own algorithm //method arguments can be changed  to match requirements
	
	
	@Override
	 public  boolean  classifyWikiEdit(WikiEdit wikiEdit) {
		
				return classify(wikiEdit);//still under work 
		}
		
	

}
